using System;
using MicrosoftResearch.Infer;
using MicrosoftResearch.Infer.Distributions;
using MicrosoftResearch.Infer.Maths;
using MicrosoftResearch.Infer.Collections;
using MicrosoftResearch.Infer.Factors;

namespace MicrosoftResearch.Infer.Models.User
{
	/// <summary>
	/// Generated algorithm for performing inference
	/// </summary>
	/// <remarks>
	/// The easiest way to use this class is to wrap an instance in a CompiledAlgorithm object and use
	/// the methods on CompiledAlgorithm to set parameters and execute inference.
	/// 
	/// If you instead wish to use this class directly, you must perform the following steps:
	/// 1) Create an instance of the class
	/// 2) Set the value of any externally-set fields e.g. data, priors
	/// 3) Call the Execute(numberOfIterations) method
	/// 4) Use the XXXMarginal() methods to retrieve posterior marginals for different variables.
	/// 
	/// Generated by Infer.NET 2.5 at 10:01 on dinsdag 17 september 2013.
	/// </remarks>
	public partial class LDAModel_VMP : IGeneratedAlgorithm
	{
		#region Fields
		/// <summary>Field backing the NumberOfIterationsDone property</summary>
		private int numberOfIterationsDone;
		/// <summary>Field backing the NumDocuments property</summary>
		private int numDocuments;
		/// <summary>Field backing the NumWordsInDoc property</summary>
		private int[] numWordsInDoc;
		/// <summary>Field backing the ThetaPrior property</summary>
		private Dirichlet[] thetaPrior;
		/// <summary>Field backing the PhiPrior property</summary>
		private Dirichlet[] phiPrior;
		/// <summary>Field backing the Words property</summary>
		private int[][] words;
		/// <summary>Field backing the WordCounts property</summary>
		private double[][] wordCounts;
		/// <summary>Field backing the ThetaInit property</summary>
		private IDistribution<Vector[]> thetaInit;
		/// <summary>The number of iterations last computed by Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0. Set this to zero to force re-execution of Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0</summary>
		public int Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_NumDocuments. Set this to zero to force re-execution of Changed_NumDocuments</summary>
		public int Changed_NumDocuments_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_NumDocuments_NumWordsInDoc. Set this to zero to force re-execution of Changed_NumDocuments_NumWordsInDoc</summary>
		public int Changed_NumDocuments_NumWordsInDoc_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3. Set this to zero to force re-execution of Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3</summary>
		public int Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_iterationsDone;
		/// <summary>True if Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3 has performed initialisation. Set this to false to force re-execution of Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3</summary>
		public bool Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_isInitialised;
		/// <summary>The number of iterations last computed by Constant. Set this to zero to force re-execution of Constant</summary>
		public int Constant_iterationsDone;
		/// <summary>The number of iterations last computed by Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5. Set this to zero to force re-execution of Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5</summary>
		public int Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_iterationsDone;
		/// <summary>True if Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5 has performed initialisation. Set this to false to force re-execution of Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5</summary>
		public bool Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised;
		/// <summary>Message from use of 'vVector__12'</summary>
		public DistributionRefArray<Dirichlet,Vector> vVector__12_use_B;
		public DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> vVector__10_rep_rpt0_F;
		/// <summary>Message to marginal of 'vVector__12'</summary>
		public DistributionRefArray<Dirichlet,Vector> vVector__12_marginal_F;
		/// <summary>Message to marginal of 'vVector__10'</summary>
		public DistributionRefArray<Dirichlet,Vector> vVector__10_marginal_F;
		/// <summary>Message to marginal of 'Evidence'</summary>
		public Bernoulli Evidence_marginal_F;
		#endregion

		#region Properties
		/// <summary>The number of iterations done from the initial state</summary>
		public int NumberOfIterationsDone
		{			get {
				return this.numberOfIterationsDone;
			}
		}

		/// <summary>The externally-specified value of 'NumDocuments'</summary>
		public int NumDocuments
		{			get {
				return this.numDocuments;
			}
			set {
				if (this.numDocuments!=value) {
					this.numDocuments = value;
					this.numberOfIterationsDone = 0;
					this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised = false;
					this.Changed_NumDocuments_iterationsDone = 0;
					this.Changed_NumDocuments_NumWordsInDoc_iterationsDone = 0;
					this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_iterationsDone = 0;
					this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
				}
			}
		}

		/// <summary>The externally-specified value of 'NumWordsInDoc'</summary>
		public int[] NumWordsInDoc
		{			get {
				return this.numWordsInDoc;
			}
			set {
				if ((value!=null)&&(value.Length!=this.numDocuments)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.numDocuments)+" was expected for variable \'NumWordsInDoc\'");
				}
				this.numWordsInDoc = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised = false;
				this.Changed_NumDocuments_NumWordsInDoc_iterationsDone = 0;
				this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'ThetaPrior'</summary>
		public Dirichlet[] ThetaPrior
		{			get {
				return this.thetaPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=this.numDocuments)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.numDocuments)+" was expected for variable \'ThetaPrior\'");
				}
				this.thetaPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised = false;
				this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'PhiPrior'</summary>
		public Dirichlet[] PhiPrior
		{			get {
				return this.phiPrior;
			}
			set {
				if ((value!=null)&&(value.Length!=5)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+5)+" was expected for variable \'PhiPrior\'");
				}
				this.phiPrior = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_iterationsDone = 0;
				this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'Words'</summary>
		public int[][] Words
		{			get {
				return this.words;
			}
			set {
				if ((value!=null)&&(value.Length!=this.numDocuments)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.numDocuments)+" was expected for variable \'Words\'");
				}
				this.words = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised = false;
				this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'WordCounts'</summary>
		public double[][] WordCounts
		{			get {
				return this.wordCounts;
			}
			set {
				if ((value!=null)&&(value.Length!=this.numDocuments)) {
					throw new ArgumentException(((("Provided array of length "+value.Length)+" when length ")+this.numDocuments)+" was expected for variable \'WordCounts\'");
				}
				this.wordCounts = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised = false;
				this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
			}
		}

		/// <summary>The externally-specified value of 'ThetaInit'</summary>
		public IDistribution<Vector[]> ThetaInit
		{			get {
				return this.thetaInit;
			}
			set {
				this.thetaInit = value;
				this.numberOfIterationsDone = 0;
				this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised = false;
				this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_iterationsDone = 0;
				this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
			}
		}

		#endregion

		#region Methods
		/// <summary>Get the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object GetObservedValue(string variableName)
		{
			if (variableName=="NumDocuments") {
				return this.NumDocuments;
			}
			if (variableName=="NumWordsInDoc") {
				return this.NumWordsInDoc;
			}
			if (variableName=="ThetaPrior") {
				return this.ThetaPrior;
			}
			if (variableName=="PhiPrior") {
				return this.PhiPrior;
			}
			if (variableName=="Words") {
				return this.Words;
			}
			if (variableName=="WordCounts") {
				return this.WordCounts;
			}
			if (variableName=="ThetaInit") {
				return this.ThetaInit;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>Set the observed value of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="value">Observed value</param>
		public void SetObservedValue(string variableName, object value)
		{
			if (variableName=="NumDocuments") {
				this.NumDocuments = (int)value;
				return ;
			}
			if (variableName=="NumWordsInDoc") {
				this.NumWordsInDoc = (int[])value;
				return ;
			}
			if (variableName=="ThetaPrior") {
				this.ThetaPrior = (Dirichlet[])value;
				return ;
			}
			if (variableName=="PhiPrior") {
				this.PhiPrior = (Dirichlet[])value;
				return ;
			}
			if (variableName=="Words") {
				this.Words = (int[][])value;
				return ;
			}
			if (variableName=="WordCounts") {
				this.WordCounts = (double[][])value;
				return ;
			}
			if (variableName=="ThetaInit") {
				this.ThetaInit = (IDistribution<Vector[]>)value;
				return ;
			}
			throw new ArgumentException("Not an observed variable name: "+variableName);
		}

		/// <summary>The marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		public object Marginal(string variableName)
		{
			if (variableName=="Evidence") {
				return this.EvidenceMarginal();
			}
			if (variableName=="vVector__10") {
				return this.VVector__10Marginal();
			}
			if (variableName=="vVector__12") {
				return this.VVector__12Marginal();
			}
			throw new ArgumentException("This class was not built to infer "+variableName);
		}

		public T Marginal<T>(string variableName)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName));
		}

		/// <summary>The query-specific marginal distribution of the specified variable.</summary>
		/// <param name="variableName">Variable name</param>
		/// <param name="query">QueryType name. For example, GibbsSampling answers 'Marginal', 'Samples', and 'Conditionals' queries</param>
		public object Marginal(string variableName, string query)
		{
			if (query=="Marginal") {
				return this.Marginal(variableName);
			}
			throw new ArgumentException(((("This class was not built to infer \'"+variableName)+"\' with query \'")+query)+"\'");
		}

		public T Marginal<T>(string variableName, string query)
		{
			return Distribution.ChangeType<T>(this.Marginal(variableName, query));
		}

		/// <summary>Update all marginals, by iterating message passing the given number of times</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		/// <param name="initialise">If true, messages that initialise loops are reset when observed values change</param>
		private void Execute(int numberOfIterations, bool initialise)
		{
			if (numberOfIterations<this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone) {
				this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised = false;
				this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_isInitialised = false;
				this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
			}
			this.Constant();
			this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5(initialise);
			this.Changed_NumDocuments();
			this.Changed_NumDocuments_NumWordsInDoc();
			this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3(initialise);
			this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0(numberOfIterations);
			this.numberOfIterationsDone = numberOfIterations;
		}

		public void Execute(int numberOfIterations)
		{
			this.Execute(numberOfIterations, true);
		}

		public void Update(int additionalIterations)
		{
			this.Execute(this.numberOfIterationsDone+additionalIterations, false);
		}

		private void OnProgressChanged(ProgressChangedEventArgs e)
		{
			// Make a temporary copy of the event to avoid a race condition
			// if the last subscriber unsubscribes immediately after the null check and before the event is raised.
			EventHandler<ProgressChangedEventArgs> handler = this.ProgressChanged;
			if (handler!=null) {
				handler(this, e);
			}
		}

		/// <summary>Reset all messages to their initial values.  Sets NumberOfIterationsDone to 0.</summary>
		public void Reset()
		{
			this.Execute(0);
		}

		/// <summary>Computations that do not depend on observed values</summary>
		public void Constant()
		{
			if (this.Constant_iterationsDone==1) {
				return ;
			}
			// Create array for 'vVector__12_use' Backwards messages.
			this.vVector__12_use_B = new DistributionRefArray<Dirichlet,Vector>(5);
			this.Constant_iterationsDone = 1;
			this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of PhiPrior and must reset on changes to numberOfIterationsDecreased and NumDocuments and NumWordsInDoc and Words and WordCounts and ThetaPrior and ThetaInit</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		public void Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5(bool initialise)
		{
			if ((this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_iterationsDone==1)&&((!initialise)||this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised)) {
				return ;
			}
			for(int T = 0; T<5; T++) {
				this.vVector__12_use_B[T] = ArrayHelper.MakeUniform<Dirichlet>(Dirichlet.Uniform(this.phiPrior[T].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Sparse, 1E-11, 0)));
			}
			this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_iterationsDone = 1;
			this.Changed_PhiPrior_Init_numberOfIterationsDecreased_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaP5_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of NumDocuments</summary>
		public void Changed_NumDocuments()
		{
			if (this.Changed_NumDocuments_iterationsDone==1) {
				return ;
			}
			// Create array for replicates of 'vVector__10_rep_rpt0_F'
			this.vVector__10_rep_rpt0_F = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(this.numDocuments);
			this.Changed_NumDocuments_iterationsDone = 1;
			this.Changed_NumDocuments_NumWordsInDoc_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of NumDocuments and NumWordsInDoc</summary>
		public void Changed_NumDocuments_NumWordsInDoc()
		{
			if (this.Changed_NumDocuments_NumWordsInDoc_iterationsDone==1) {
				return ;
			}
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'vVector__10_rep_rpt0_F'
				this.vVector__10_rep_rpt0_F[D] = new DistributionRefArray<Dirichlet,Vector>(this.numWordsInDoc[D]);
			}
			this.Changed_NumDocuments_NumWordsInDoc_iterationsDone = 1;
			this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of NumDocuments and NumWordsInDoc and ThetaInit and must reset on changes to numberOfIterationsDecreased and PhiPrior and Words and WordCounts and ThetaPrior</summary>
		/// <param name="initialise">If true, reset messages that initialise loops</param>
		public void Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3(bool initialise)
		{
			if ((this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_iterationsDone==1)&&((!initialise)||this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_isInitialised)) {
				return ;
			}
			for(int D = 0; D<this.numDocuments; D++) {
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					this.vVector__10_rep_rpt0_F[D][WInD] = ArrayHelper.MakeCopy<Dirichlet>(((DistributionRefArray<Dirichlet,Vector>)this.thetaInit)[D]);
				}
			}
			this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_iterationsDone = 1;
			this.Changed_NumDocuments_NumWordsInDoc_ThetaInit_Init_numberOfIterationsDecreased_PhiPrior_Words_WordCou3_isInitialised = true;
			this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = 0;
		}

		/// <summary>Computations that depend on the observed value of numberOfIterationsDecreased and PhiPrior and NumDocuments and NumWordsInDoc and Words and WordCounts and ThetaPrior and ThetaInit</summary>
		/// <param name="numberOfIterations">The number of times to iterate each loop</param>
		public void Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0(int numberOfIterations)
		{
			if (this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone==numberOfIterations) {
				return ;
			}
			// Message to use of 'vVector__10'
			DistributionRefArray<Dirichlet,Vector> vVector__10_use_F = ArrayHelper.MakeCopy<DistributionRefArray<Dirichlet,Vector>>((DistributionRefArray<Dirichlet,Vector>)this.thetaInit);
			// Create array for 'vVector__10_use' Forwards messages.
			vVector__10_use_F = ArrayHelper.MakeCopy<DistributionRefArray<Dirichlet,Vector>>((DistributionRefArray<Dirichlet,Vector>)this.thetaInit);
			// Create array for replicates of 'topic_F'
			DistributionRefArray<DistributionRefArray<Discrete,int>,int[]> topic_F = new DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'topic_F'
				topic_F[D] = new DistributionRefArray<Discrete,int>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					topic_F[D][WInD] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.thetaPrior[D].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Dense, 0.0, 0)));
				}
			}
			// Create array for replicates of 'topic_selector_uses_B'
			Discrete[][][] topic_selector_uses_B = new Discrete[this.numDocuments][][];
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'topic_selector_uses_B'
				topic_selector_uses_B[D] = new Discrete[this.numWordsInDoc[D]][];
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					// Create array for 'topic_selector_uses' Backwards messages.
					topic_selector_uses_B[D][WInD] = new Discrete[2];
					for(int _ind = 0; _ind<2; _ind++) {
						topic_selector_uses_B[D][WInD][_ind] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.thetaPrior[D].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Dense, 0.0, 0)));
					}
				}
			}
			// Create array for replicates of 'topic_selector_cases_uses_B'
			DistributionStructArray<Bernoulli,bool>[][][] topic_selector_cases_uses_B = new DistributionStructArray<Bernoulli,bool>[this.numDocuments][][];
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'topic_selector_cases_uses_B'
				topic_selector_cases_uses_B[D] = new DistributionStructArray<Bernoulli,bool>[this.numWordsInDoc[D]][];
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					// Create array for 'topic_selector_cases_uses' Backwards messages.
					topic_selector_cases_uses_B[D][WInD] = new DistributionStructArray<Bernoulli,bool>[5];
					for(int _iv = 0; _iv<5; _iv++) {
						// Create array for 'topic_selector_cases_uses' Backwards messages.
						topic_selector_cases_uses_B[D][WInD][_iv] = new DistributionStructArray<Bernoulli,bool>(3);
						for(int _ind = 0; _ind<3; _ind++) {
							topic_selector_cases_uses_B[D][WInD][_iv][_ind] = Bernoulli.Uniform();
						}
					}
				}
			}
			// Create array for replicates of 'vVector__12_T_cond_topic_B'
			DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> vVector__12_T_cond_topic_B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'vVector__12_T_cond_topic_B'
				vVector__12_T_cond_topic_B[D] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					// Create array for replicates of 'vVector__12_T_cond_topic_B'
					vVector__12_T_cond_topic_B[D][WInD] = new DistributionRefArray<Dirichlet,Vector>(5);
					for(int T = 0; T<5; T++) {
						vVector__12_T_cond_topic_B[D][WInD][T] = ArrayHelper.MakeUniform<Dirichlet>(Dirichlet.Uniform(this.phiPrior[T].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Sparse, 1E-11, 0)));
					}
				}
			}
			// Create array for replicates of '_hoist2'
			DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> _hoist2 = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of '_hoist2'
				_hoist2[D] = new DistributionRefArray<Dirichlet,Vector>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					for(int T = 0; T<5; T++) {
						_hoist2[D][WInD] = ArrayHelper.CopyStorage<Dirichlet>(vVector__12_T_cond_topic_B[D][WInD][T]);
						T = 5-1;
					}
					for(int T = 0; T<5; T++) {
						_hoist2[D][WInD] = DiscreteFromDirichletOp.ProbsAverageLogarithm(this.words[D][WInD], _hoist2[D][WInD]);
						T = 5-1;
					}
				}
			}
			// Create array for replicates of 'vVector__12_rep_rep_rpt0_B'
			DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> vVector__12_rep_rep_rpt0_B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'vVector__12_rep_rep_rpt0_B'
				vVector__12_rep_rep_rpt0_B[D] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					// Create array for replicates of 'vVector__12_rep_rep_rpt0_B'
					vVector__12_rep_rep_rpt0_B[D][WInD] = new DistributionRefArray<Dirichlet,Vector>(5);
					for(int T = 0; T<5; T++) {
						vVector__12_rep_rep_rpt0_B[D][WInD][T] = ArrayHelper.MakeUniform<Dirichlet>(Dirichlet.Uniform(this.phiPrior[T].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Sparse, 1E-11, 0)));
					}
				}
			}
			// Create array for replicates of 'vVector__12_rep_rep_B'
			DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]> vVector__12_rep_rep_B = new DistributionRefArray<DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>,Vector[][]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'vVector__12_rep_rep_B'
				vVector__12_rep_rep_B[D] = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(5);
				for(int T = 0; T<5; T++) {
					// Create array for 'vVector__12_rep_rep' Backwards messages.
					vVector__12_rep_rep_B[D][T] = new DistributionRefArray<Dirichlet,Vector>(this.numWordsInDoc[D]);
					for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
						vVector__12_rep_rep_B[D][T][WInD] = ArrayHelper.MakeUniform<Dirichlet>(Dirichlet.Uniform(this.phiPrior[T].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Sparse, 1E-11, 0)));
					}
				}
			}
			// Create array for replicates of 'vVector__12_rep_B'
			DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> vVector__12_rep_B = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(5);
			for(int T = 0; T<5; T++) {
				// Create array for 'vVector__12_rep' Backwards messages.
				vVector__12_rep_B[T] = new DistributionRefArray<Dirichlet,Vector>(this.numDocuments);
				for(int D = 0; D<this.numDocuments; D++) {
					vVector__12_rep_B[T][D] = ArrayHelper.MakeUniform<Dirichlet>(Dirichlet.Uniform(this.phiPrior[T].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Sparse, 1E-11, 0)));
				}
			}
			// Create array for 'vVector__12_marginal' Forwards messages.
			this.vVector__12_marginal_F = new DistributionRefArray<Dirichlet,Vector>(5);
			for(int T = 0; T<5; T++) {
				this.vVector__12_marginal_F[T] = ArrayHelper.MakeUniform<Dirichlet>(Dirichlet.Uniform(this.phiPrior[T].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Sparse, 1E-11, 0)));
			}
			// Create array for replicates of 'topic_selector_cases_B'
			DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]> topic_selector_cases_B = new DistributionRefArray<DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>,bool[][]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'topic_selector_cases_B'
				topic_selector_cases_B[D] = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					// Create array for 'topic_selector_cases' Backwards messages.
					topic_selector_cases_B[D][WInD] = new DistributionStructArray<Bernoulli,bool>(5);
					for(int _iv = 0; _iv<5; _iv++) {
						topic_selector_cases_B[D][WInD][_iv] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'topic_selector_B'
			DistributionRefArray<DistributionRefArray<Discrete,int>,int[]> topic_selector_B = new DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'topic_selector_B'
				topic_selector_B[D] = new DistributionRefArray<Discrete,int>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					topic_selector_B[D][WInD] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.thetaPrior[D].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Dense, 0.0, 0)));
				}
			}
			// Message to marginal of 'topic'
			// Create array for replicates of 'topic_marginal_F'
			DistributionRefArray<DistributionRefArray<Discrete,int>,int[]> topic_marginal_F = new DistributionRefArray<DistributionRefArray<Discrete,int>,int[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'topic_marginal_F'
				topic_marginal_F[D] = new DistributionRefArray<Discrete,int>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					topic_marginal_F[D][WInD] = ArrayHelper.MakeUniform<Discrete>(Discrete.Uniform(this.thetaPrior[D].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Dense, 0.0, 0)));
				}
			}
			// Create array for replicates of 'vVector__10_rep_rpt0_B'
			DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> vVector__10_rep_rpt0_B = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'vVector__10_rep_rpt0_B'
				vVector__10_rep_rpt0_B[D] = new DistributionRefArray<Dirichlet,Vector>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					vVector__10_rep_rpt0_B[D][WInD] = ArrayHelper.MakeUniform<Dirichlet>(Dirichlet.Uniform(this.thetaPrior[D].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Dense, 0.0, 0)));
				}
			}
			// Create array for replicates of 'vVector__10_rep_B'
			DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]> vVector__10_rep_B = new DistributionRefArray<DistributionRefArray<Dirichlet,Vector>,Vector[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for 'vVector__10_rep' Backwards messages.
				vVector__10_rep_B[D] = new DistributionRefArray<Dirichlet,Vector>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					vVector__10_rep_B[D][WInD] = ArrayHelper.MakeUniform<Dirichlet>(Dirichlet.Uniform(this.thetaPrior[D].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Dense, 0.0, 0)));
				}
			}
			// Message from use of 'vVector__10'
			DistributionRefArray<Dirichlet,Vector> vVector__10_use_B = default(DistributionRefArray<Dirichlet,Vector>);
			// Create array for 'vVector__10_use' Backwards messages.
			vVector__10_use_B = new DistributionRefArray<Dirichlet,Vector>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				vVector__10_use_B[D] = ArrayHelper.MakeUniform<Dirichlet>(Dirichlet.Uniform(this.thetaPrior[D].Dimension, Sparsity.FromSpec(MicrosoftResearch.Infer.Maths.StorageType.Dense, 0.0, 0)));
			}
			this.vVector__10_marginal_F = ArrayHelper.MakeCopy<DistributionRefArray<Dirichlet,Vector>>((DistributionRefArray<Dirichlet,Vector>)this.thetaInit);
			// Create array for 'vVector__10_marginal' Forwards messages.
			this.vVector__10_marginal_F = ArrayHelper.MakeCopy<DistributionRefArray<Dirichlet,Vector>>((DistributionRefArray<Dirichlet,Vector>)this.thetaInit);
			for(int iteration = this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone; iteration<numberOfIterations; iteration++) {
				for(int T = 0; T<5; T++) {
					// Message to 'vVector__12_marginal' from Variable factor
					this.vVector__12_marginal_F[T] = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.vVector__12_use_B[T], this.phiPrior[T], this.vVector__12_marginal_F[T]);
					for(int D = 0; D<this.numDocuments; D++) {
						for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
							// Message to 'topic_selector_cases_uses' from Discrete factor
							topic_selector_cases_uses_B[D][WInD][T][2] = Bernoulli.FromLogOdds(DiscreteFromDirichletOp.AverageLogFactor(this.words[D][WInD], this.vVector__12_marginal_F[T]));
						}
					}
				}
				for(int D = 0; D<this.numDocuments; D++) {
					for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
						for(int _iv = 0; _iv<5; _iv++) {
							// Message to 'topic_selector_cases' from Replicate factor
							topic_selector_cases_B[D][WInD][_iv] = ReplicateOp.DefAverageLogarithm<Bernoulli>(topic_selector_cases_uses_B[D][WInD][_iv], topic_selector_cases_B[D][WInD][_iv]);
						}
						// Message to 'topic_selector_uses' from CasesInt factor
						topic_selector_uses_B[D][WInD][0] = IntCasesOp.IAverageLogarithm(topic_selector_cases_B[D][WInD], topic_selector_uses_B[D][WInD][0]);
						// Message to 'topic_selector' from Replicate factor
						topic_selector_B[D][WInD] = ReplicateOp.DefAverageLogarithm<Discrete>(topic_selector_uses_B[D][WInD], topic_selector_B[D][WInD]);
						// Message to 'topic' from Discrete factor
						topic_F[D][WInD] = DiscreteFromDirichletOp.SampleAverageLogarithm(this.vVector__10_rep_rpt0_F[D][WInD], topic_F[D][WInD]);
						// Message to 'topic_marginal' from Variable factor
						topic_marginal_F[D][WInD] = VariableVmpOp.MarginalAverageLogarithm<Discrete>(topic_selector_B[D][WInD], topic_F[D][WInD], topic_marginal_F[D][WInD]);
						// Message to 'vVector__10_rep_rpt0' from Discrete factor
						vVector__10_rep_rpt0_B[D][WInD] = DiscreteFromDirichletOp.ProbsAverageLogarithm(topic_marginal_F[D][WInD], vVector__10_rep_rpt0_B[D][WInD]);
						// Message to 'vVector__10_rep' from Enter factor
						vVector__10_rep_B[D][WInD] = PowerPlateOp.ValueAverageLogarithm<Dirichlet>(vVector__10_rep_rpt0_B[D][WInD], this.wordCounts[D][WInD], vVector__10_rep_B[D][WInD]);
					}
					// Message to 'vVector__10_use' from Replicate factor
					vVector__10_use_B[D] = ReplicateOp.DefAverageLogarithm<Dirichlet>(vVector__10_rep_B[D], vVector__10_use_B[D]);
					// Message to 'vVector__10_marginal' from Variable factor
					this.vVector__10_marginal_F[D] = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(vVector__10_use_B[D], this.thetaPrior[D], this.vVector__10_marginal_F[D]);
					for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
						for(int T = 0; T<5; T++) {
							// Message to 'vVector__12_rep_rep_rpt0' from EnterOne factor
							vVector__12_rep_rep_rpt0_B[D][WInD][T] = GateEnterOneOp<Vector>.ValueAverageLogarithm<Dirichlet>(_hoist2[D][WInD], topic_marginal_F[D][WInD], T, vVector__12_rep_rep_rpt0_B[D][WInD][T]);
							// Message to 'vVector__12_rep_rep' from Enter factor
							vVector__12_rep_rep_B[D][T][WInD] = PowerPlateOp.ValueAverageLogarithm<Dirichlet>(vVector__12_rep_rep_rpt0_B[D][WInD][T], this.wordCounts[D][WInD], vVector__12_rep_rep_B[D][T][WInD]);
						}
					}
					for(int T = 0; T<5; T++) {
						// Message to 'vVector__12_rep' from Replicate factor
						vVector__12_rep_B[T][D] = ReplicateOp.DefAverageLogarithm<Dirichlet>(vVector__12_rep_rep_B[D][T], vVector__12_rep_B[T][D]);
					}
				}
				for(int T = 0; T<5; T++) {
					// Message to 'vVector__12_use' from Replicate factor
					this.vVector__12_use_B[T] = ReplicateOp.DefAverageLogarithm<Dirichlet>(vVector__12_rep_B[T], this.vVector__12_use_B[T]);
				}
				for(int D = 0; D<this.numDocuments; D++) {
					// Message to 'vVector__10_use' from Variable factor
					vVector__10_use_F[D] = ArrayHelper.SetTo<Dirichlet>(vVector__10_use_F[D], this.vVector__10_marginal_F[D]);
					for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
						// Message to 'vVector__10_rep_rpt0' from Enter factor
						this.vVector__10_rep_rpt0_F[D][WInD] = ArrayHelper.SetTo<Dirichlet>(this.vVector__10_rep_rpt0_F[D][WInD], vVector__10_use_F[D]);
					}
				}
				this.OnProgressChanged(new ProgressChangedEventArgs(iteration));
			}
			// The constant 'vBernoulli2'
			Bernoulli vBernoulli2 = Bernoulli.Uniform();
			this.Evidence_marginal_F = Bernoulli.Uniform();
			Bernoulli[] Evidence_selector_cases_0_uses_B = default(Bernoulli[]);
			// Create array for 'Evidence_selector_cases_0_uses' Backwards messages.
			Evidence_selector_cases_0_uses_B = new Bernoulli[17];
			for(int _ind = 0; _ind<17; _ind++) {
				Evidence_selector_cases_0_uses_B[_ind] = Bernoulli.Uniform();
			}
			for(int T = 0; T<5; T++) {
				// Message to 'vVector__12_marginal' from Variable factor
				this.vVector__12_marginal_F[T] = VariableVmpOp.MarginalAverageLogarithm<Dirichlet>(this.vVector__12_use_B[T], this.phiPrior[T], this.vVector__12_marginal_F[T]);
			}
			DistributionStructArray<Bernoulli,bool>[] Evidence_selector_cases_0_rep_uses_B = default(DistributionStructArray<Bernoulli,bool>[]);
			// Create array for 'Evidence_selector_cases_0_rep_uses' Backwards messages.
			Evidence_selector_cases_0_rep_uses_B = new DistributionStructArray<Bernoulli,bool>[this.numDocuments];
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for 'Evidence_selector_cases_0_rep_uses' Backwards messages.
				Evidence_selector_cases_0_rep_uses_B[D] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					Evidence_selector_cases_0_rep_uses_B[D][_ind] = Bernoulli.Uniform();
				}
				// Message to 'Evidence_selector_cases_0_rep_uses' from Random factor
				Evidence_selector_cases_0_rep_uses_B[D][0] = Bernoulli.FromLogOdds(UnaryOp<Vector>.AverageLogFactor<Dirichlet>(this.vVector__10_marginal_F[D], this.thetaPrior[D]));
				// Message to 'Evidence_selector_cases_0_rep_uses' from Variable factor
				Evidence_selector_cases_0_rep_uses_B[D][1] = Bernoulli.FromLogOdds(VariableVmpOp.AverageLogFactor<Dirichlet>(this.vVector__10_marginal_F[D]));
			}
			DistributionStructArray<Bernoulli,bool> Evidence_selector_cases_0_rep_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'Evidence_selector_cases_0_rep' Backwards messages.
			Evidence_selector_cases_0_rep_B = new DistributionStructArray<Bernoulli,bool>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				Evidence_selector_cases_0_rep_B[D] = Bernoulli.Uniform();
				// Message to 'Evidence_selector_cases_0_rep' from Replicate factor
				Evidence_selector_cases_0_rep_B[D] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep_uses_B[D], Evidence_selector_cases_0_rep_B[D]);
			}
			// Message to 'Evidence_selector_cases_0_uses' from Replicate factor
			Evidence_selector_cases_0_uses_B[1] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep_B, Evidence_selector_cases_0_uses_B[1]);
			DistributionStructArray<Bernoulli,bool>[] Evidence_selector_cases_0_rep2_uses_B = default(DistributionStructArray<Bernoulli,bool>[]);
			// Create array for 'Evidence_selector_cases_0_rep2_uses' Backwards messages.
			Evidence_selector_cases_0_rep2_uses_B = new DistributionStructArray<Bernoulli,bool>[5];
			for(int T = 0; T<5; T++) {
				// Create array for 'Evidence_selector_cases_0_rep2_uses' Backwards messages.
				Evidence_selector_cases_0_rep2_uses_B[T] = new DistributionStructArray<Bernoulli,bool>(2);
				for(int _ind = 0; _ind<2; _ind++) {
					Evidence_selector_cases_0_rep2_uses_B[T][_ind] = Bernoulli.Uniform();
				}
				// Message to 'Evidence_selector_cases_0_rep2_uses' from Random factor
				Evidence_selector_cases_0_rep2_uses_B[T][0] = Bernoulli.FromLogOdds(UnaryOp<Vector>.AverageLogFactor<Dirichlet>(this.vVector__12_marginal_F[T], this.phiPrior[T]));
				// Message to 'Evidence_selector_cases_0_rep2_uses' from Variable factor
				Evidence_selector_cases_0_rep2_uses_B[T][1] = Bernoulli.FromLogOdds(VariableVmpOp.AverageLogFactor<Dirichlet>(this.vVector__12_marginal_F[T]));
			}
			DistributionStructArray<Bernoulli,bool> Evidence_selector_cases_0_rep2_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'Evidence_selector_cases_0_rep2' Backwards messages.
			Evidence_selector_cases_0_rep2_B = new DistributionStructArray<Bernoulli,bool>(5);
			for(int T = 0; T<5; T++) {
				Evidence_selector_cases_0_rep2_B[T] = Bernoulli.Uniform();
				// Message to 'Evidence_selector_cases_0_rep2' from Replicate factor
				Evidence_selector_cases_0_rep2_B[T] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep2_uses_B[T], Evidence_selector_cases_0_rep2_B[T]);
			}
			// Message to 'Evidence_selector_cases_0_uses' from Replicate factor
			Evidence_selector_cases_0_uses_B[5] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep2_B, Evidence_selector_cases_0_uses_B[5]);
			// Create array for replicates of 'Evidence_selector_cases_0_rep4_rep_uses_B'
			DistributionStructArray<Bernoulli,bool>[][] Evidence_selector_cases_0_rep4_rep_uses_B = new DistributionStructArray<Bernoulli,bool>[this.numDocuments][];
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for 'Evidence_selector_cases_0_rep4_rep_uses' Backwards messages.
				Evidence_selector_cases_0_rep4_rep_uses_B[D] = new DistributionStructArray<Bernoulli,bool>[this.numWordsInDoc[D]];
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					// Create array for 'Evidence_selector_cases_0_rep4_rep_uses' Backwards messages.
					Evidence_selector_cases_0_rep4_rep_uses_B[D][WInD] = new DistributionStructArray<Bernoulli,bool>(3);
					for(int _ind = 0; _ind<3; _ind++) {
						Evidence_selector_cases_0_rep4_rep_uses_B[D][WInD][_ind] = Bernoulli.Uniform();
					}
				}
			}
			// Create array for replicates of 'Evidence_selector_cases_0_rep4_rep_rpt0_uses_B'
			Bernoulli[][][] Evidence_selector_cases_0_rep4_rep_rpt0_uses_B = new Bernoulli[this.numDocuments][][];
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'Evidence_selector_cases_0_rep4_rep_rpt0_uses_B'
				Evidence_selector_cases_0_rep4_rep_rpt0_uses_B[D] = new Bernoulli[this.numWordsInDoc[D]][];
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					// Create array for 'Evidence_selector_cases_0_rep4_rep_rpt0_uses' Backwards messages.
					Evidence_selector_cases_0_rep4_rep_rpt0_uses_B[D][WInD] = new Bernoulli[2];
					for(int _ind = 0; _ind<2; _ind++) {
						Evidence_selector_cases_0_rep4_rep_rpt0_uses_B[D][WInD][_ind] = Bernoulli.Uniform();
					}
					// Message to 'Evidence_selector_cases_0_rep4_rep_rpt0_uses' from Discrete factor
					Evidence_selector_cases_0_rep4_rep_rpt0_uses_B[D][WInD][0] = Bernoulli.FromLogOdds(DiscreteFromDirichletOp.AverageLogFactor(topic_marginal_F[D][WInD], this.vVector__10_rep_rpt0_F[D][WInD]));
					// Message to 'Evidence_selector_cases_0_rep4_rep_rpt0_uses' from Variable factor
					Evidence_selector_cases_0_rep4_rep_rpt0_uses_B[D][WInD][1] = Bernoulli.FromLogOdds(VariableVmpOp.AverageLogFactor<Discrete>(topic_marginal_F[D][WInD]));
				}
			}
			// Create array for replicates of 'Evidence_selector_cases_0_rep4_rep_rpt0_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Evidence_selector_cases_0_rep4_rep_rpt0_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'Evidence_selector_cases_0_rep4_rep_rpt0_B'
				Evidence_selector_cases_0_rep4_rep_rpt0_B[D] = new DistributionStructArray<Bernoulli,bool>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					Evidence_selector_cases_0_rep4_rep_rpt0_B[D][WInD] = Bernoulli.Uniform();
					// Message to 'Evidence_selector_cases_0_rep4_rep_rpt0' from Replicate factor
					Evidence_selector_cases_0_rep4_rep_rpt0_B[D][WInD] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep4_rep_rpt0_uses_B[D][WInD], Evidence_selector_cases_0_rep4_rep_rpt0_B[D][WInD]);
					// Message to 'Evidence_selector_cases_0_rep4_rep_uses' from Enter factor
					Evidence_selector_cases_0_rep4_rep_uses_B[D][WInD][0] = PowerPlateOp.ValueAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep4_rep_rpt0_B[D][WInD], this.wordCounts[D][WInD], Evidence_selector_cases_0_rep4_rep_uses_B[D][WInD][0]);
				}
			}
			// Create array for replicates of 'Evidence_selector_cases_0_rep4_rep_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Evidence_selector_cases_0_rep4_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for 'Evidence_selector_cases_0_rep4_rep' Backwards messages.
				Evidence_selector_cases_0_rep4_rep_B[D] = new DistributionStructArray<Bernoulli,bool>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					Evidence_selector_cases_0_rep4_rep_B[D][WInD] = Bernoulli.Uniform();
					// Message to 'Evidence_selector_cases_0_rep4_rep' from Replicate factor
					Evidence_selector_cases_0_rep4_rep_B[D][WInD] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep4_rep_uses_B[D][WInD], Evidence_selector_cases_0_rep4_rep_B[D][WInD]);
				}
			}
			DistributionStructArray<Bernoulli,bool> Evidence_selector_cases_0_rep4_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'Evidence_selector_cases_0_rep4' Backwards messages.
			Evidence_selector_cases_0_rep4_B = new DistributionStructArray<Bernoulli,bool>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				Evidence_selector_cases_0_rep4_B[D] = Bernoulli.Uniform();
				// Message to 'Evidence_selector_cases_0_rep4' from Replicate factor
				Evidence_selector_cases_0_rep4_B[D] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep4_rep_B[D], Evidence_selector_cases_0_rep4_B[D]);
			}
			// Message to 'Evidence_selector_cases_0_uses' from Replicate factor
			Evidence_selector_cases_0_uses_B[9] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep4_B, Evidence_selector_cases_0_uses_B[9]);
			// Create array for replicates of 'Evidence_selector_cases_0_rep7_rep_rpt0_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Evidence_selector_cases_0_rep7_rep_rpt0_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for replicates of 'Evidence_selector_cases_0_rep7_rep_rpt0_B'
				Evidence_selector_cases_0_rep7_rep_rpt0_B[D] = new DistributionStructArray<Bernoulli,bool>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					Evidence_selector_cases_0_rep7_rep_rpt0_B[D][WInD] = Bernoulli.Uniform();
					// Message to 'Evidence_selector_cases_0_rep7_rep_rpt0' from CasesInt factor
					Evidence_selector_cases_0_rep7_rep_rpt0_B[D][WInD] = Bernoulli.FromLogOdds(IntCasesOp.AverageLogFactor(topic_selector_cases_B[D][WInD], topic_marginal_F[D][WInD]));
				}
			}
			// Create array for replicates of 'Evidence_selector_cases_0_rep7_rep_B'
			DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]> Evidence_selector_cases_0_rep7_rep_B = new DistributionRefArray<DistributionStructArray<Bernoulli,bool>,bool[]>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				// Create array for 'Evidence_selector_cases_0_rep7_rep' Backwards messages.
				Evidence_selector_cases_0_rep7_rep_B[D] = new DistributionStructArray<Bernoulli,bool>(this.numWordsInDoc[D]);
				for(int WInD = 0; WInD<this.numWordsInDoc[D]; WInD++) {
					Evidence_selector_cases_0_rep7_rep_B[D][WInD] = Bernoulli.Uniform();
					// Message to 'Evidence_selector_cases_0_rep7_rep' from Enter factor
					Evidence_selector_cases_0_rep7_rep_B[D][WInD] = PowerPlateOp.ValueAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep7_rep_rpt0_B[D][WInD], this.wordCounts[D][WInD], Evidence_selector_cases_0_rep7_rep_B[D][WInD]);
				}
			}
			DistributionStructArray<Bernoulli,bool> Evidence_selector_cases_0_rep7_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'Evidence_selector_cases_0_rep7' Backwards messages.
			Evidence_selector_cases_0_rep7_B = new DistributionStructArray<Bernoulli,bool>(this.numDocuments);
			for(int D = 0; D<this.numDocuments; D++) {
				Evidence_selector_cases_0_rep7_B[D] = Bernoulli.Uniform();
				// Message to 'Evidence_selector_cases_0_rep7' from Replicate factor
				Evidence_selector_cases_0_rep7_B[D] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep7_rep_B[D], Evidence_selector_cases_0_rep7_B[D]);
			}
			// Message to 'Evidence_selector_cases_0_uses' from Replicate factor
			Evidence_selector_cases_0_uses_B[12] = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_rep7_B, Evidence_selector_cases_0_uses_B[12]);
			Bernoulli Evidence_selector_cases_0_B = Bernoulli.Uniform();
			// Message to 'Evidence_selector_cases_0' from Replicate factor
			Evidence_selector_cases_0_B = ReplicateOp.DefAverageLogarithm<Bernoulli>(Evidence_selector_cases_0_uses_B, Evidence_selector_cases_0_B);
			DistributionStructArray<Bernoulli,bool> Evidence_selector_cases_B = default(DistributionStructArray<Bernoulli,bool>);
			// Create array for 'Evidence_selector_cases' Backwards messages.
			Evidence_selector_cases_B = new DistributionStructArray<Bernoulli,bool>(2);
			for(int _ind0 = 0; _ind0<2; _ind0++) {
				Evidence_selector_cases_B[_ind0] = Bernoulli.Uniform();
			}
			// Message to 'Evidence_selector_cases' from Copy factor
			Evidence_selector_cases_B[0] = ArrayHelper.SetTo<Bernoulli>(Evidence_selector_cases_B[0], Evidence_selector_cases_0_B);
			Bernoulli Evidence_selector_B = Bernoulli.Uniform();
			// Message to 'Evidence_selector' from Cases factor
			Evidence_selector_B = CasesOp.BAverageLogarithm(Evidence_selector_cases_B);
			// Message to 'Evidence_marginal' from Variable factor
			this.Evidence_marginal_F = VariableVmpOp.MarginalAverageLogarithm<Bernoulli>(Evidence_selector_B, vBernoulli2, this.Evidence_marginal_F);
			this.Changed_numberOfIterationsDecreased_PhiPrior_NumDocuments_NumWordsInDoc_Words_WordCounts_ThetaPrior_0_iterationsDone = numberOfIterations;
		}

		/// <summary>
		/// Returns the marginal distribution for 'Evidence' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public Bernoulli EvidenceMarginal()
		{
			return this.Evidence_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector__10' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Dirichlet,Vector> VVector__10Marginal()
		{
			return this.vVector__10_marginal_F;
		}

		/// <summary>
		/// Returns the marginal distribution for 'vVector__12' given by the current state of the
		/// message passing algorithm.
		/// </summary>
		/// <returns>The marginal distribution</returns>
		public DistributionRefArray<Dirichlet,Vector> VVector__12Marginal()
		{
			return this.vVector__12_marginal_F;
		}

		#endregion

		#region Events
		/// <summary>Event that is fired when the progress of inference changes, typically at the end of one iteration of the inference algorithm.</summary>
		public event EventHandler<ProgressChangedEventArgs> ProgressChanged;
		#endregion

	}

}
